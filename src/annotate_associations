#!/usr/bin/env python


import sys
import roman
import argparse
import numpy as np
import pandas as pd


def get_options():
    description = 'Annotate gwas results'
    parser = argparse.ArgumentParser(description=description)

    parser.add_argument('associations',
                        help='Limix output')
    parser.add_argument('features',
                        help='Reference genome features bed file')

    return parser.parse_args()


if __name__ == "__main__":
    options = get_options()

    ffile = options.features
    ifile = options.associations

    f = pd.read_table(ffile,
                      index_col=3,
                      header=None).sort_index()
    fc = f[0].to_dict()
    fp = {x: (y+z)/2 for x, (y, z) in f[[1, 2]].iterrows()}

    m = pd.read_table(ifile)

    m = m.set_index('chrom').sort_index()

    y = m.loc[range(1, 17)].reset_index()
    y['set'] = 'SNP'

    w = m.loc[17].reset_index().set_index('snp')
    w.index = [x[2:] for x in w.index]
    w = w.sort_index()
    for gene in sorted(w.index):
        w.loc[gene, 'chrom'] = fc.get(gene, np.nan)
        w.loc[gene, 'pos'] = fp.get(gene, np.nan)
    w = w.reset_index().set_index('chrom').sort_index().reset_index()
    w['set'] = 'CNV'

    t = m.loc[18].reset_index().set_index('snp')
    t.index = ['-'.join(x.split('.')[1:]).split('_')[0] for x in t.index]
    t = t.sort_index()
    for gene in sorted(t.index):
        t.loc[gene, 'chrom'] = fc.get(gene, np.nan)
        t.loc[gene, 'pos'] = fp.get(gene, np.nan)
    t = t.reset_index().set_index('chrom').sort_index().reset_index()
    t['set'] = 'pangenome'

    z = m.loc[19].reset_index().set_index('snp')
    z.index = [x[2:] for x in z.index]
    z = z.sort_index()
    for gene in sorted(z.index):
        z.loc[gene, 'chrom'] = fc.get(gene, np.nan)
        z.loc[gene, 'pos'] = fp.get(gene, np.nan)
    z = z.reset_index().set_index('chrom').sort_index().reset_index()
    z['set'] = 'sickness'

    m = pd.concat([y, w, t, z], sort=False)
    m = m.set_index(['condition', 'chrom', 'pos']).sort_index().reset_index()
    m.to_csv(sys.stdout, sep='\t', index=False)
