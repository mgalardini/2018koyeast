#!/usr/bin/env python


import sys
import argparse
import numpy as np
import pandas as pd
from limix.io import read_plink
from limix.qtl import qtl_test_lmm


def get_options():
    description = ''
    parser = argparse.ArgumentParser(description=description)

    parser.add_argument('plink',
                        help='Plink files prefix')
    parser.add_argument('phenotypes',
                        help='Phenotypes file')
    parser.add_argument('kinship',
                        help='Kinship matrix file')

    parser.add_argument('--restrict',
                        default=None,
                        help='Only use the strains contained in this file')
    
    return parser.parse_args()


if __name__ == "__main__":
    options = get_options()

    (bim, fam, bed) = read_plink(options.plink,
                                 verbose=True)
    bim = bim.to_dict()
    geno = pd.DataFrame(bed.compute()).astype(float).T
    geno.index = fam.iid

    pheno = pd.read_table(options.phenotypes, index_col=0)
    pheno = pheno[pheno.dtypes[pheno.dtypes == float].index]
    pheno = pheno.dropna()

    sim = pd.read_table(options.kinship, index_col=0)

    idx = pheno.index.intersection(geno.index).intersection(sim.index)
    if options.restrict is not None:
        idx = idx.intersection({x.rstrip() for x in open(options.restrict)})
    geno = geno.loc[idx]
    sim = sim.loc[idx, idx]
    pheno = pheno.loc[idx]

    lmm = qtl_test_lmm(snps=geno.values,
                       pheno=pheno.values,
                       K=sim.values,
                       covs=None,
                       test='lrt')
    pval = pd.DataFrame(lmm.getPv(),
                        index=pheno.columns,
                        columns=geno.columns).stack().reset_index()
    pval.columns = ['condition', 'snpIDX', 'pvalue']
    pval['snp'] = [bim['snp'].get(x, np.nan) for x in pval['snpIDX']]
    pval['chrom'] = [bim['chrom'].get(x, np.nan) for x in pval['snpIDX']]
    pval['pos'] = [bim['pos'].get(x, np.nan) for x in pval['snpIDX']]
    pval = pval[['condition', 'snp', 'chrom', 'pos', 'pvalue']]
    pval = pval.set_index(['condition', 'snp', 'chrom', 'pos'])
    beta = pd.DataFrame(lmm.getBetaSNP(),
                        index=pheno.columns,
                        columns=geno.columns).stack().reset_index()
    beta.columns = ['condition', 'snpIDX', 'beta']
    beta['snp'] = [bim['snp'].get(x, np.nan) for x in beta['snpIDX']]
    beta['chrom'] = [bim['chrom'].get(x, np.nan) for x in beta['snpIDX']]
    beta['pos'] = [bim['pos'].get(x, np.nan) for x in beta['snpIDX']]
    beta = beta[['condition', 'snp', 'chrom', 'pos', 'beta']]
    beta = beta.set_index(['condition', 'snp', 'chrom', 'pos'])

    m = pval.join(beta, how='outer').reset_index()
    m.to_csv(sys.stdout, sep='\t', index=False)
