#!/usr/bin/env python3
# coding: utf-8

import sys
import itertools
import numpy as np
import pandas as pd
from scipy import stats
import statsmodels.api as sm

def get_options():
    import argparse

    description = 'Get a list of deviating s-scores between strain pairs'
    parser = argparse.ArgumentParser(description=description)

    parser.add_argument('scores',
                        help='KO scores file')
    parser.add_argument('replicates',
                        help='KO replicates file')

    parser.add_argument('--one-position',
                        action='store_true',
                        default=False,
                        help='Consider a single position pair '
                             ' (default: all of them)')

    return parser.parse_args()

def get_variance_function(v,
                          slices=10,
                          min_periods=20,
                          sample=None,
                          function=pd.Series.var):
    x = []
    y = []
    z = []
    vmin = v['sum'].min()
    vmax = v['sum'].max()
    lv = None
    for rv in np.linspace(vmin, vmax, slices):
        if lv is None:
            lv = rv
            continue
        vs = v[(v['sum'] >= lv) & (v['sum'] <= rv)]
        if vs.shape[0] < min_periods:
            lv = rv
            continue
        if sample is not None:
            var = function(vs['sub'].sample(sample,
                                            replace=True))
            mean = vs['sub'].sample(sample,
                                    replace=True).mean()
        else:
            var = function(vs['sub'])
            mean = vs['sub'].mean()
        x.append((lv + rv) / 2)
        y.append(var)
        z.append(mean)
    return x, y, z

def get_null(m):
    b1 = m.loc['B1']
    b2 = m.loc['B2']
    cdx = []
    for c in {x[0]
              for x in b1.index}.intersection({x[0]
                                               for x in b2.index}):
        m1 = b1.loc[c]
        m2 = b2.loc[c]
        c1 = set(m1.index)
        c2 = set(m2.index)
        idx = sorted(c1.intersection(c2))
        a1 = m1.loc[idx]['score']
        a2 = m2.loc[idx]['score']
        if len(idx) > 10:
            r, p = stats.pearsonr(a1, a2)
            if r >= 0.5:
                cdx.append(c)
    c1 = set(b1.index)
    c2 = set(b2.index)
    idx = sorted(c1.intersection(c2))
    mdx = [x for x in idx
           if x[0] not in cdx]
    a1 = b1.loc[mdx]['score']
    a2 = b2.loc[mdx]['score']
    a1.name = 'batch1'
    a2.name = 'batch2/3'
    v1 = -abs(a1 + a2)
    v2 = abs(a1 - a2)
    v1.name = 'sum'
    v2.name = 'sub'
    v = a1.to_frame().join(a2.to_frame())
    v = v.join(v1.to_frame()).join(v2.to_frame())
    x, y, z = get_variance_function(v, 100,
                                    function=pd.Series.std)
    return x, y, z

def get_deviating_scores(m, s1, s2, x, y, z):
    a1 = m[s1]
    a1.name = 'scores1'
    a2 = m[s2]
    a2.name = 'scores2'
    v1 = -abs(a1 + a2)
    v2 = abs(a1 - a2)
    v1.name = 'sum'
    v2.name = 'sub'
    w = a1.to_frame().join(a2.to_frame())
    w = w.join(pd.Series([s1 for x in range(w.shape[0])],
                         name='strain1',
                         index=w.index).to_frame())
    w = w.join(pd.Series([s2 for x in range(w.shape[0])],
                         name='strain2',
                         index=w.index).to_frame())
    w = w.join(v1.to_frame()).join(v2.to_frame())
    w = w.join(m[['phenotype1', 'phenotype2',
                  'scores-qvalue1', 'scores-qvalue2']])
    w['var'] = np.interp(-abs(a1 + a2),
                         x,
                         y)
    w['mean'] = np.interp(-abs(a1 + a2),
                     x,
                     z)
    w['pval'] = [1 - stats.norm.cdf(x, loc=z, scale=y)
                 for x,y,z in w[['sub', 'var', 'mean']].values]
    w['qval'] = sm.stats.multipletests(w['pval'], method='fdr_bh')[1]
    return w

if __name__ == "__main__":
    options = get_options()

    scores = options.scores
    bscores = options.replicates

    bm = pd.read_table(bscores, index_col=[3, 1, 0, 2, 5])
    x, y, z = get_null(bm)

    m = pd.read_table(scores)
    m = m[~m['gene'].isin({'WT', 'YOR202W'})]
    m = m.set_index(['strain', 'gene', 'condition'])
    m['phenotype'] = m['qvalue'] < 0.05
    m = m.reset_index()
    b = True
    for strain in sorted(m['strain'].unique()):
        s1 = strain
        s2 = strain

        m1 = m[m['strain'] == s1]
        m2 = m1.copy()
        w1 = []
        w2 = []
        for gene in set(m1['gene'].unique()).intersection(m2['gene'].unique()):
            t1 = m1[m1['gene'] == gene]
            t2 = t1.copy()
            done = set()
            for i, (p1, p2) in enumerate(
                    itertools.product(t1['position'].unique(),
                                      t2['position'].unique())):
                if p1 == p2 or tuple(sorted([p1, p2])) in done:
                    continue
                u1 = t1[t1['position'] == p1].copy()
                u2 = t2[t2['position'] == p2].copy()
                u1['position'] = p1 + '__' + p2
                u2['position'] = p1 + '__' + p2
                w1.append(u1)
                w2.append(u2)
                if options.one_position:
                    break
                done.add(tuple(sorted([p1, p2])))
        w1 = pd.concat(w1)
        w2 = pd.concat(w2)
        w1 = w1.set_index(['strain', 'gene',
                           'condition', 'position'])
        w2 = w2.set_index(['strain', 'gene',
                           'condition', 'position'])

        m1 = w1['score']
        m1 = m1[~m1.index.duplicated()].dropna()
        m2 = w2['score']
        m2 = m2[~m2.index.duplicated()].dropna()
        m1.name = s1
        m2.name = s2
        p1 = w1['phenotype']
        p1 = p1[~p1.index.duplicated()].dropna()
        p2 = w2['phenotype']
        p2 = p2[~p2.index.duplicated()].dropna()
        p1.name = 'phenotype1'
        p2.name = 'phenotype2'
        q1 = w1['qvalue']
        q1 = q1[~q1.index.duplicated()].dropna()
        q2 = w2['qvalue']
        q2 = q2[~q2.index.duplicated()].dropna()
        q1.name = 'scores-qvalue1'
        q2.name = 'scores-qvalue2'
        d = m1.loc[s1].to_frame().join(m2.loc[s2].to_frame(),
                                       how='inner',
                                       lsuffix='_1',
                                       rsuffix='_2').dropna()
        d = d.join(p1.loc[s1].to_frame(),
                   how='inner').dropna().join(p2.loc[s2].to_frame(),
                                              how='inner',
                                              lsuffix='_1',
                                              rsuffix='_2').dropna()
        d = d.join(q1.loc[s1].to_frame(),
                   how='inner').dropna().join(q2.loc[s2].to_frame(),
                                              how='inner',
                                              lsuffix='_1',
                                              rsuffix='_2').dropna()
        w = get_deviating_scores(d, s1 + '_1', s2 + '_2', x, y, z)
        # add a new qvalue columns to get rid of "deviations" that are not relevant
        w['qvalue'] = w['qval'].copy(deep=True)
        w.loc[w[(w['qval'] < 0.01) &
                ((w['phenotype1']) & (w['phenotype2'])) &
                 (np.sign(w['scores1']) == np.sign(w['scores2']))].index, 'qvalue'] = 1
        w.loc[w[(w['qval'] < 0.01) &
                ((~w['phenotype1']) & (~w['phenotype2']))].index, 'qvalue'] = 1
        #
        if b:
            w.to_csv(sys.stdout, sep='\t')
            b = False
        else:
            w.to_csv(sys.stdout, sep='\t', header=False)
