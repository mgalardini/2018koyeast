#!/usr/bin/env python
# coding: utf-8

def get_options():
    import argparse

    description = 'Merge two strains gene interactions'
    parser = argparse.ArgumentParser(description=description)

    parser.add_argument('scores',
                        help='Iteration 0 merge score')
    parser.add_argument('llr1',
                        help='LLR file name for strain 1')
    parser.add_argument('llr2',
                        help='LLR file name for strain 2')

    parser.add_argument('--stop',
                        type=float,
                        default=0.,
                        help='Stopping condition [Default: score 0]')

    return parser.parse_args()

def merge_score(l1, l2, g1, g2):
    if type(g1) == str:
        m1 = (g1,)
    else:
        m1 = g1
    if type(g2) == str:
        m2 = (g2,)
    else:
        m2 = g2
    s = 1 / (len(m1) * len(m2))
    s1 = sum([l1.get((g1, g2), l1.get((g2, g1), np.nan))
              for g1, g2 in itertools.product(
                  [x for x in m1],
                  [x for x in m2])
              if g1 != g2])
    s2 = sum([l2.get((g1, g2), l2.get((g2, g1), np.nan))
              for g1, g2 in itertools.product(
                  [x for x in m1],
                  [x for x in m2])
              if g1 != g2])
    score = (s * s1) + (s * s2)
    return g1, g2, score

if __name__ == "__main__":
    options = get_options()

    scores = options.scores
    llr1 = options.llr1
    llr2 = options.llr2

    import sys
    import itertools
    import numpy as np
    import pandas as pd
    import networkx as nx

    sys.stderr.write('Building iteration 0 graph\n')

    g = nx.Graph()
    b = True
    for l in open(scores):
        if b:
            b = False
            continue
        g1, g2, v = l.rstrip().split()
        g.add_edge(g1, g2, weight=float(v))
    
    sys.stderr.write('iteration 0: %d nodes, %d edges\n' % (len(g.nodes()),
                                                            len(g.edges())))
    
    sys.stderr.write('Reading input files\n')
    
    l1 = pd.read_table(llr1, index_col=[0, 1])['cop'].dropna().to_dict()
    l2 = pd.read_table(llr2, index_col=[0, 1])['cop'].dropna().to_dict()
    
    i = 0
    print('iteration\tcomponents\tbest-score')
    edges = sorted(g.edges(data=True), key=lambda x: x[-1]['weight'])
    v1, v2, v = edges.pop()
    maxk = (v1, v2)
    maxv = v['weight']
    new_edges = None
    erased = set()
    while True:
        i += 1
        v1, v2 = maxk
        v = maxv
        if v <= options.stop:
            sys.stderr.write('reached merge score threshold\n')
            break
        g.remove_node(v1)
        erased.add(v1)
        g.remove_node(v2)
        erased.add(v2)
        if type(v1) == str:
            v1 = (v1,)
        if type(v2) == str:
            v2 = (v2,)
        k = tuple([x for x in v1] + [x for x in v2])
        # another stop condition
        if len(g.nodes()) == 0:
            sys.stderr.write('no more nodes to be merged\n')
            print('%d\t%s\t%f' % (i, ','.join(k), v))
            break
        tmp = [(x, k, {'weight': merge_score(l1, l2, x, k)[2]})
               for x in g.nodes()]
        g.add_edges_from(tmp)
        if new_edges is None:
            new_edges = tmp
        else:
            new_edges.extend(tmp)
        new_edges = sorted([x for x in new_edges
                            if x[0] not in erased and x[1] not in erased],
                           key=lambda x: x[-1]['weight'])
        sys.stderr.write('iteration %d: %d nodes, %d edges\n' % (i,
                                                                 len(g.nodes()),
                                                                 len(g.edges())))
        for n in g.nodes():
            if type(n) == str:
                continue
            print('%d\t%s\t%f' % (i, ','.join(n), v))
        # which one is the best for next round?
        maxk = None
        maxv = None
        # another stop condition
        if len(edges) == 0 and len(new_edges) == 0:
            sys.stderr.write('no more edges available\n')
            break
        if len(edges) == 0 or new_edges[-1][-1]['weight'] > edges[-1][-1]['weight']:
            while len(new_edges) > 0:
                v1, v2, v = new_edges.pop()
                if v1 not in erased and v2 not in erased:
                    maxk = (v1, v2)
                    maxv = v['weight']
                    break
            if maxk is None:
                while len(edges) > 0:
                    v1, v2, v = edges.pop()
                    if v1 not in erased and v2 not in erased:
                        maxk = (v1, v2)
                        maxv = v['weight']
                        break
        else:
            while len(edges) > 0:
                v1, v2, v = edges.pop()
                if v1 not in erased and v2 not in erased:
                    maxk = (v1, v2)
                    maxv = v['weight']
                    break
            if maxk is None:
                while len(new_edges) > 0:
                    v1, v2, v = new_edges.pop()
                    if v1 not in erased and v2 not in erased:
                        maxk = (v1, v2)
                        maxv = v['weight']
                        break
        # no more edges
        if maxk is None:
            sys.stderr.write('no more edges available\n')
            break
