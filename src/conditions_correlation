#!/usr/bin/env python
'''Compute conditions correlations'''


import sys
import argparse
import numpy as np
import pandas as pd


def get_options():
    description = 'Compute conditions correlations'
    parser = argparse.ArgumentParser(description=description)

    parser.add_argument('scores',
                        help='S-scores table')

    return parser.parse_args()


if __name__ == "__main__":
    options = get_options()

    m = pd.read_table(options.scores, index_col=[0, 2, 1])
    genes = None
    for s in {x[0] for x in m.index}:
        gs = {x[0] for x in m.loc[s].index}
        if genes is None:
            genes = gs
        else:
            genes = genes.intersection(gs)
    genes = sorted(genes)

    m = m.reset_index().set_index('gene').sort_index().loc[genes].reset_index()
    m = m.pivot_table(index='gene',
                      columns=['strain','condition'],
                      values='score')
    r = []
    for strain in {x[0] for x in m.columns}:
        c = m[strain].corr().dropna(how='all').T.dropna(how='all').T
        c = c.mask(np.triu(np.ones(c.shape)).astype(bool)).stack()
        c.name = 'correlation'
        c = c.to_frame()
        c['strain'] = strain
        r.append(c)
    r = pd.concat(r)

    r.to_csv(sys.stdout, sep='\t')
