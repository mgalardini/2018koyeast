#!/usr/bin/env python
# coding: utf-8

def get_options():
    import argparse

    description = 'Extract gene sets from deviating genes'
    parser = argparse.ArgumentParser(description=description)

    parser.add_argument('scores',
                        help='KO scores file')
    parser.add_argument('deviating',
                        help='Deviating genes file')
    parser.add_argument('study',
                        help='Study output file')
    parser.add_argument('population',
                        help='Population output file')
    
    parser.add_argument('--threshold',
                        default=0.1,
                        type=float,
                        help='Gene swap proportion threshold [Default: 0.1]')
    parser.add_argument('--s288c',
                        action='store_true',
                        default=False,
                        help='Focus on S288C')

    return parser.parse_args()

if __name__ == "__main__":
    options = get_options()

    scores = options.scores
    dev = options.deviating

    import itertools
    import numpy as np
    import pandas as pd

    m = pd.read_table(scores, index_col=[0, 2, 1])
    m['phenotype'] = m['qvalue'] < 0.05
    genes = None
    for s in {x[0] for x in m.index}:
        gs = {x[0] for x in m.loc[s].index}
        if genes is None:
            genes = gs
        else:
            genes = genes.intersection(gs)
    genes = sorted(genes)
    pgenes = m.loc[(slice(None), genes),].groupby('gene')['phenotype'].max()
    pgenes = set(pgenes[pgenes == True].index)
    
    d = pd.read_table(dev, index_col=[4, 5, 1, 0])

    strains = {y
               for x in d.index
               for y in x[:2]}

    if not options.s288c:
        v = d.reset_index().set_index('gene').loc[genes].reset_index()
    else:
        v = d.loc[(slice(None), 'S288C'),].reset_index().set_index('gene').loc[genes].reset_index()

    r = (d[d['qvalue'] < 0.01].groupby(['strain1', 'strain2', 'gene'])[
	 'phenotype1'].sum() / d.groupby(['strain1', 'strain2', 'gene'])[
	 'phenotype1'].sum()).dropna().reset_index().rename(
	columns={'strain1': 'strain',
		 'strain2': 'other',
		 'phenotype1': 'deviations'})
    s = (d[d['qvalue'] < 0.01].groupby(['strain2', 'strain1', 'gene'])[
	 'phenotype2'].sum() / d.groupby(['strain2', 'strain1', 'gene'])[
	 'phenotype2'].sum()).dropna().reset_index().rename(
	columns={'strain2': 'strain',
		 'strain1': 'other',
		 'phenotype2': 'deviations'})
    t = pd.concat([r, s], sort=False).set_index(['strain', 'other', 'gene'])
    t = t.reindex([(x, y, g)
		  for x, y, in itertools.product(strains, strains)
		  if x != y
		  for g in pgenes],
		  fill_value=0)['deviations'].groupby('gene').mean()

    f = open(options.population, 'w')
    for gene in pgenes:
        f.write('%s\n' % gene)
    f.close()
    f = open(options.study, 'w')
    for gene in t[t >= options.threshold].dropna().index:
        f.write('%s\n' % gene)
    f.close()
