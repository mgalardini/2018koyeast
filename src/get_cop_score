#!/usr/bin/env python
# coding: utf-8

def get_options():
    import argparse

    description = 'Compute the COP model (Ryan et al., 2012)'
    parser = argparse.ArgumentParser(description=description)

    parser.add_argument('correlation',
                        help='Gene-gene correlation matrix')
    parser.add_argument('target',
                        help='Gene-gene correlation matrix (target)')
    parser.add_argument('interactions',
                        help='Gene-gene physical interaction pairs file')
    
    parser.add_argument('--fraction',
                        type=float,
                        default=0.01,
                        help='Fraction of random gene-gene'
                             ' correlations to use as negative set [Default: 1%%]')

    return parser.parse_args()

if __name__ == "__main__":
    options = get_options()

    corr = options.correlation
    cpx = options.interactions

    import sys
    import numpy as np
    import pandas as pd
    import statsmodels.api as sm

    it = set()
    for l in open(cpx):
        g1, g2 = l.rstrip().split()
        it.add(tuple(sorted((g1, g2))))

    m = pd.read_table(corr, index_col=0)
    genes = set(m.index).intersection(m.columns)
    m = m.loc[genes, genes].unstack()
    
    t = pd.read_table(options.target, index_col=0)
    t.index.name = 'gene2'
    t = t.T
    t.index.name = 'gene1'
    t = t.T
    genes = set(t.index).intersection(t.columns)
    t = t.loc[genes, genes].unstack()
    
    x = m.loc[sorted(it)].dropna()
    y = m.sample(int(x.shape[0] * options.fraction))

    endog = np.concatenate((np.ones(x.shape[0]),
                            np.zeros(y.shape[0])))
    exog = np.concatenate((x.values,
                           y))
    md = sm.Logit(endog, exog)
    res = md.fit(disp=False)

    t = pd.Series(md.predict(res.params, t.values.reshape(-1, 1)),
                  index=t.index)
    t.name = 'cop'
    t.to_csv(sys.stdout,
             sep='\t',
             header=True)
